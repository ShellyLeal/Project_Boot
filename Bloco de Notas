import javax.swing.*; // inicia a biblioteca para interface gráfica
import javax.swing.text.Document;
import javax.swing.text.StyledDocument;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

import java.awt.*;
import java.awt.event.*; // para os eventos
import java.util.Calendar;
import java.util.Scanner; // para ler um arquivo
import java.io.*; // para escrever e criar um arquivo
import java.text.SimpleDateFormat;

public class Notepad extends JFrame implements ActionListener {
	// private TextArea textArea = new TextArea("", 0, 0,
	// TextArea.SCROLLBARS_VERTICAL_ONLY);
	private MenuBar menuBar = new MenuBar(); // cria o menu
	private JTextPane textPane = new JTextPane();
	private Menu file = new Menu();
	Document doc = textPane.getDocument();
	// Opções do menu
	private MenuItem openFile = new MenuItem(); // opção de abrir

	private MenuItem saveFile = new MenuItem(); // opção de salvar

	private MenuItem close = new MenuItem(); // opção de fechar



	public Notepad() {

		this.setSize(500, 300); // tamanho inicial da janela de texto

		this.setTitle("Bloco de Notas Java"); // título da janela

		setDefaultCloseOperation(EXIT_ON_CLOSE); // operação de fechar a janela

		this.textPane.setFont(new Font("Century Gothic", Font.BOLD, 12)); // fonte
																			// de
																			// texto

		this.getContentPane().setLayout(new BorderLayout());

		this.getContentPane().add(textPane);

		// inclusão do menu de opções

		this.setMenuBar(this.menuBar);

		this.menuBar.add(this.file);

		this.file.setLabel("Arquivo");

		
		this.openFile.setLabel("Abrir"); // nomeia a opção de abrir
		this.openFile.addActionListener(this); // para detectar o clique
		this.openFile.setShortcut(new MenuShortcut(KeyEvent.VK_O, false)); // tecla de atalho
		this.file.add(this.openFile); // adiciona ao menu
		

		this.saveFile.setLabel("Salvar como..."); // nomeia a opção de salvar
		this.saveFile.addActionListener(this); // para detectar o clique
		this.saveFile.setShortcut(new MenuShortcut(KeyEvent.VK_S, false)); // tecla de atalho																		
		this.file.add(this.saveFile); // adiciona ao menu

		this.close.setLabel("Fechar"); // nomeia a opção de fechar
		this.close.addActionListener(this); // para detectar o clique
		this.close.setShortcut(new MenuShortcut(KeyEvent.VK_F4, false)); // atalho "CTRL+F4"
		this.file.add(this.close); // adiciona ao menu

	
	    
		
	}

	public void actionPerformed(ActionEvent e) {

		// Evento fechar arquivo

		if (e.getSource() == this.close)

			this.dispose(); // fecha o aplicativo



		// Evento abrir arquivo

		else if (e.getSource() == this.openFile) {

			JFileChooser open = new JFileChooser(); // abre o diálogo para escolher o arquivo
												

			int option = open.showOpenDialog(this); // acrescenta a opção 'aceitar' ou 'cancelar'
													
			if (option == JFileChooser.APPROVE_OPTION) {

				this.textPane.setText(""); // limpa a área de texto e inclui o conteúdo do arquivo aberto

				try {

					// scan: ler o arquivo

					Scanner scan = new Scanner(new FileReader(open.getSelectedFile().getPath()));

					while (scan.hasNext()) // funciona até ler o final do arquivo
					
						this.doc.insertString(doc.getLength(), scan.nextLine() + "\n", null); // adiciona uma linha ao arquivo
			
				} catch (Exception ex) { // gerar mensagens para as exceções

					System.out.println(ex.getMessage());

				}

			}

		}

		// Evento salvar arquivo

		else if (e.getSource() == this.saveFile) {

			JFileChooser save = new JFileChooser(); // abre o diálogo para escolher arquivo
			int option = save.showSaveDialog(this);

			if (option == JFileChooser.APPROVE_OPTION) {

				try {

					// out: criar arquivo para salvar o texto e horário de modificação
					BufferedWriter out = new BufferedWriter(new FileWriter(save.getSelectedFile().getPath() + ".txt"));
					Calendar cal = Calendar.getInstance();
					SimpleDateFormat sdf = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss");

					out.write(this.textPane.getText() + "\r\nÚltima modificação: " + sdf.format(cal.getTime())); // passa o conteudo da area de texto para o arquivo
																												
					out.close(); // fecha o arquivo

				} catch (Exception ex) { // gera mensagens para exceções

					System.out.println(ex.getMessage());

				}

			}

		}
		
		
	}

	// método main

	public static void main(String args[]) {

		Notepad app = new Notepad();

		app.setVisible(true);

	}

}
